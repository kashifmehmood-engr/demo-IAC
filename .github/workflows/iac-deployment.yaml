name: IAC workflow
on:
  workflow_dispatch:
    inputs:
      tf_directory:
        description: input directory which contains tf code
        default: "."
        type: string

# concurrency required to avoid terraform lock contention during ECR provisioning
concurrency: ci-${{ github.repository }}-terraform-pipeline

jobs:
  terraform:
    runs-on: ubuntu-latest

    permissions:
      id-token: write   
      contents: read   
      security-events: write
      actions: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.aws_account_id }}:role/${{ secrets.GH_IAM_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.5.0'
  
      - name: terraform fmt
        uses: dflook/terraform-fmt-check@v1
        with:
          path: ${{ inputs.tf_directory }}
      - name: Wrong formatting found
        if: ${{ failure() && steps.fmt-check.outputs.failure-reason == 'check-failed' }}
        run: echo "formatting check failed"

      - name: Checkov GitHub Action
        uses: bridgecrewio/checkov-action@v12
        continue-on-error: true
        with:
          output_format: cli,sarif
          output_file_path: console,results.sarif
        
      #- name: Upload SARIF file
      #  uses: github/codeql-action/upload-sarif@v2
      #  
      #  if: success() || failure()
      #  with:
      #    sarif_file: results.sarif

      - name: Terraform Init
        run: |
          terraform init -upgrade -reconfigure 
        working-directory: ${{ inputs.tf_directory }}

      - name: Terraform plan
        run: |
          terraform plan -var-file="terraform.tfvars"
        working-directory: ${{ inputs.tf_directory }}

      - name: Terraform Apply
        run: |
          terraform apply -auto-approve  -var-file="terraform.tfvars"
        working-directory: ${{ inputs.tf_directory }}
